{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/schemas/pdf-data-schema.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\n// Schema for the actual structured data the AI should extract\nexport const ExtractedPdfDataSchema = z.object({\n  classe: z.string().describe('The class name. Return \"\" if not found.'),\n  cours: z.string().describe('The course name. Return \"\" if not found.'),\n  date: z.string().describe('The date of the session. Return \"\" if not found.'),\n  nom_du_professeur: z.string().describe(\"The professor's name. Return \\\"\\\" if not found.\"),\n  nombre_des_présents: z.number().describe('The number of present students. Return 0 if not found.'),\n  salle_n: z.string().describe('The room number. Return \"\" if not found.'),\n  séance: z.string().describe('The session information. Return \"\" if not found.'),\n  présences: z.array(z.object({\n    n: z.string().describe('The student number or ID. Return \"\" if not found.'),\n    nom_prénom: z.string().describe(\"The student's full name. Return \\\"\\\" if not found.\"),\n  })).describe('An array representing the attendees. Return [] if not found or if data is missing for all attendees.'),\n});\nexport type ExtractedPdfData = z.infer<typeof ExtractedPdfDataSchema>;\n"],"names":[],"mappings":";;;AACA;;AAGO,MAAM,yBAAyB,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,QAAQ,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,MAAM,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,mBAAmB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACvC,qBAAqB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,QAAQ,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,WAAW,sIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAC1B,GAAG,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACvB,YAAY,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,IAAI,QAAQ,CAAC;AACf","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/save-to-mongodb/route.ts"],"sourcesContent":["\nimport type { NextRequest } from 'next/server';\nimport { NextResponse } from 'next/server';\nimport { MongoClient, ObjectId, ServerApiVersion } from 'mongodb';\nimport type { ExtractedPdfData } from '@/ai/schemas/pdf-data-schema';\nimport { ExtractedPdfDataSchema } from '@/ai/schemas/pdf-data-schema';\n\nconst MONGO_DATABASE_NAME = 'pdf_data_db';\nconst MONGO_COLLECTION_NAME = 'extracted_documents';\n\nexport async function POST(request: NextRequest) {\n  const MONGODB_URI = process.env.MONGODB_URI;\n\n  if (!MONGODB_URI) {\n    console.error('MongoDB URI not configured in environment variables.');\n    return NextResponse.json({\n      success: false,\n      message: 'MongoDB connection string is not configured. Please set MONGODB_URI in .env file.',\n    }, { status: 500 });\n  }\n\n  let dataToSave: ExtractedPdfData;\n  try {\n    const rawData = await request.json();\n    const validationResult = ExtractedPdfDataSchema.safeParse(rawData);\n    if (!validationResult.success) {\n      console.error('Invalid data format received:', validationResult.error.flatten());\n      return NextResponse.json({\n        success: false,\n        message: `Invalid data format: ${validationResult.error.flatten().formErrors.join(', ')}`,\n      }, { status: 400 });\n    }\n    dataToSave = validationResult.data;\n  } catch (error) {\n    console.error('Failed to parse request body:', error);\n    return NextResponse.json({ success: false, message: 'Failed to parse request body.' }, { status: 400 });\n  }\n\n  const client = new MongoClient(MONGODB_URI, {\n    serverApi: {\n      version: ServerApiVersion.v1,\n      strict: true,\n      deprecationErrors: true,\n    },\n    tls: true,\n  });\n\n  try {\n    await client.connect();\n    console.log('Connected successfully to MongoDB from API route');\n    const db = client.db(MONGO_DATABASE_NAME);\n    const collection = db.collection(MONGO_COLLECTION_NAME);\n\n    const result = await collection.insertOne(dataToSave);\n    const insertedId = result.insertedId;\n\n    console.log(`Data saved to MongoDB with ID: ${insertedId.toString()} from API route`);\n    return NextResponse.json({\n      success: true,\n      message: 'Data successfully saved to MongoDB.',\n      recordId: insertedId.toString(),\n    });\n  } catch (error: any) {\n    console.error('Failed to save data to MongoDB from API route:', error);\n    // Attempt to provide a more specific error message if available\n    let errorMessage = `Failed to save data to MongoDB: ${error.message}`;\n    if (error.name === 'MongoNetworkError') {\n        errorMessage = `MongoDB Network Error: ${error.message}. Check IP Whitelisting and network connectivity.`;\n    } else if (error.message && error.message.includes('SSL')) {\n        errorMessage = `MongoDB SSL/TLS Error: ${error.message}. Ensure your environment supports the required TLS version/ciphers for Atlas.`;\n    }\n    return NextResponse.json({\n      success: false,\n      message: errorMessage,\n    }, { status: 500 });\n  } finally {\n    await client.close();\n    console.log('MongoDB connection closed in API route.');\n  }\n}\n"],"names":[],"mappings":";;;AAEA;AACA;AAEA;;;;AAEA,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB;AAEvB,eAAe,KAAK,OAAoB;IAC7C,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;IAE3C,IAAI,CAAC,aAAa;QAChB,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;IAEA,IAAI;IACJ,IAAI;QACF,MAAM,UAAU,MAAM,QAAQ,IAAI;QAClC,MAAM,mBAAmB,+IAAA,CAAA,yBAAsB,CAAC,SAAS,CAAC;QAC1D,IAAI,CAAC,iBAAiB,OAAO,EAAE;YAC7B,QAAQ,KAAK,CAAC,iCAAiC,iBAAiB,KAAK,CAAC,OAAO;YAC7E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS,CAAC,qBAAqB,EAAE,iBAAiB,KAAK,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO;YAC3F,GAAG;gBAAE,QAAQ;YAAI;QACnB;QACA,aAAa,iBAAiB,IAAI;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,SAAS;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACvG;IAEA,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,aAAa;QAC1C,WAAW;YACT,SAAS,uGAAA,CAAA,mBAAgB,CAAC,EAAE;YAC5B,QAAQ;YACR,mBAAmB;QACrB;QACA,KAAK;IACP;IAEA,IAAI;QACF,MAAM,OAAO,OAAO;QACpB,QAAQ,GAAG,CAAC;QACZ,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,MAAM,aAAa,GAAG,UAAU,CAAC;QAEjC,MAAM,SAAS,MAAM,WAAW,SAAS,CAAC;QAC1C,MAAM,aAAa,OAAO,UAAU;QAEpC,QAAQ,GAAG,CAAC,CAAC,+BAA+B,EAAE,WAAW,QAAQ,GAAG,eAAe,CAAC;QACpF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,UAAU,WAAW,QAAQ;QAC/B;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,kDAAkD;QAChE,gEAAgE;QAChE,IAAI,eAAe,CAAC,gCAAgC,EAAE,MAAM,OAAO,EAAE;QACrE,IAAI,MAAM,IAAI,KAAK,qBAAqB;YACpC,eAAe,CAAC,uBAAuB,EAAE,MAAM,OAAO,CAAC,iDAAiD,CAAC;QAC7G,OAAO,IAAI,MAAM,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,QAAQ;YACvD,eAAe,CAAC,uBAAuB,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;QAC1I;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB,SAAU;QACR,MAAM,OAAO,KAAK;QAClB,QAAQ,GAAG,CAAC;IACd;AACF","debugId":null}}]
}