{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/schemas/pdf-data-schema.ts"],"sourcesContent":["\n'use server'; // This directive should NOT be here for a schema definition file. Removing.\n/**\n * @fileOverview Defines the Zod schema for data extracted from PDFs.\n * This schema is used by multiple flows.\n */\nimport { z } from 'genkit';\n\n// Schema for the actual data structure we want the AI to extract\nexport const ExtractedPdfDataSchema = z.object({\n  classe: z.string().describe('The class concerned by the attendance sheet. Return \"\" if not found.'),\n  cours: z.string().describe('The course concerned by the attendance sheet. Return \"\" if not found.'),\n  date: z.string().describe('The date of the attendance sheet. Return \"\" if not found.'),\n  nom_du_professeur: z.string().describe('The name of the professor. Return \"\" if not found.'),\n  nombre_des_présents: z.number().describe('The total number of attendees. Return 0 if not found.'),\n  salle_n: z.string().describe('The room number. Return \"\" if not found.'),\n  séance: z.string().describe('The session time. Return \"\" if not found.'),\n  présences: z.array(z.object({\n    n: z.string().describe(\"The student number. Return \\\"\\\" if not found.\"),\n    nom_prénom: z.string().describe(\"The student's full name. Return \\\"\\\" if not found.\"),\n  })).describe('An array representing the attendees. Return [] if not found or if data is missing for all attendees.'),\n});\nexport type ExtractedPdfData = z.infer<typeof ExtractedPdfDataSchema>;\n"],"names":[],"mappings":";;;;;AAEA;;;CAGC,GACD;AAAA;;;;;AAGO,MAAM,uCAAoB,GAApB,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACvC,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAC1B,GAAG,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACvB,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,IAAI,QAAQ,CAAC;AACf;;;IAZa;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/extract-data-from-pdf.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Extracts data from a PDF using AI (Genkit).\n *\n * - extractDataFromPdf - A function that handles the data extraction process.\n * - ExtractDataFromPdfInput - The input type for the extractDataFromPdf function.\n * - ExtractDataFromPdfOutput - The return type for the extractDataFromPdf function.\n * - ExtractedPdfData (type) - The TypeScript type for the structured data AI should extract.\n */\n\nimport { ai } from '@/ai/genkit';\nimport {z} from 'genkit';\nimport { ExtractedPdfDataSchema, type ExtractedPdfData } from '@/ai/schemas/pdf-data-schema'; // Import schema and type\n\n// Schema for the overall flow input\nconst ExtractDataFromPdfInputSchema = z.object({\n pdfDataUri: z.string()\n    .describe(\n      \"The PDF document, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type ExtractDataFromPdfInput = z.infer<typeof ExtractDataFromPdfInputSchema>;\n\n// Export the type for use in other modules (e.g. frontend)\nexport type { ExtractedPdfData };\n\n\n// Schema for the flow's final output to the frontend (still a stringified JSON)\nconst ExtractDataFromPdfOutputSchema = z.object({\n  jsonOutput: z.string().describe('The extracted data from the PDF, as a JSON string.'),\n});\nexport type ExtractDataFromPdfOutput = z.infer<typeof ExtractDataFromPdfOutputSchema>;\n\n\nexport async function extractDataFromPdf(input: ExtractDataFromPdfInput): Promise<ExtractDataFromPdfOutput> {\n  return extractDataFromPdfFlow(input);\n}\n\nconst extractDataFromPdfPromptObj = ai.definePrompt({\n  name: 'extractDataFromPdfPrompt',\n  input: { schema: ExtractDataFromPdfInputSchema }, // AI prompt still takes the PDF URI\n  output: { schema: ExtractedPdfDataSchema }, // AI is asked to output the direct data structure (imported schema)\n  prompt: `You are an expert data extraction specialist.\nYou will receive a PDF document representing an attendance sheet. Your task is to analyze this document and extract all the relevant information from it.\n\nReturn the extracted data as a JSON object strictly conforming to the provided schema.\n\nCRITICAL INSTRUCTION FOR HANDLING MISSING DATA:\n- For all string fields (e.g., \\`classe\\`, \\`cours\\`, \\`date\\`, \\`nom_du_professeur\\`, \\`salle_n\\`, \\`séance\\`, and within \\`présences\\`: \\`n\\`, \\`nom_prénom\\`), if the information cannot be found or determined from the PDF, you MUST use an empty string \\`\"\"\\` as its value for that field.\n- For the \\`nombre_des_présents\\` field (a number), if it cannot be determined, you MUST use the number \\`0\\` as its value.\n- For the \\`présences\\` array, if no attendees are found or the data is missing for all attendees, you MUST use an empty array \\`[]\\` as its value. If some attendees are found but some details are missing for an individual attendee, apply the empty string rule for their \\`n\\` or \\`nom_prénom\\` fields.\n- DO NOT OMIT ANY KEYS specified in the schema. The goal is to always return a JSON object that strictly conforms to the defined structure, using these empty/default values for missing information.\n\nPDF Document:\n{{media url=pdfDataUri}}`,\n});\n\nconst extractDataFromPdfFlow = ai.defineFlow(\n  {\n    name: 'extractDataFromPdfFlow',\n    inputSchema: ExtractDataFromPdfInputSchema,\n    outputSchema: ExtractDataFromPdfOutputSchema, // Flow still outputs the stringified version for the frontend\n  },\n  async (flowInput) => {\n    console.log('Input to Genkit flow for PDF processing. PDF Data URI length:', flowInput.pdfDataUri.length);\n\n    const defaultEmptyStructuredData: ExtractedPdfData = { // Use the imported type\n      classe: \"\",\n      cours: \"\",\n      date: \"\",\n      nom_du_professeur: \"\",\n      nombre_des_présents: 0,\n      salle_n: \"\",\n      séance: \"\",\n      présences: [],\n    };\n    const defaultEmptyJsonOutputString = JSON.stringify(defaultEmptyStructuredData);\n\n    try {\n      // The prompt now directly outputs the structured data.\n      const { output: structuredData } = await extractDataFromPdfPromptObj(flowInput);\n\n      if (!structuredData) {\n        console.error('AI model did not return structured data. Returning default empty structure.');\n        return { jsonOutput: defaultEmptyJsonOutputString };\n      }\n      \n      // structuredData should be an object matching ExtractedPdfDataSchema due to Genkit's schema enforcement.\n      // Now, stringify this structured data for the jsonOutput field.\n      const jsonOutputString = JSON.stringify(structuredData);\n      console.log('Successfully extracted data from AI. Stringified output (snippet):', jsonOutputString.substring(0, 250) + (jsonOutputString.length > 250 ? \"...\" : \"\"));\n      return { jsonOutput: jsonOutputString };\n\n    } catch (error: any) {\n      console.error('Error during AI model interaction or data processing in extractDataFromPdfFlow:', error.message, error.stack);\n      // In case of any error during the prompt call or processing, return the default empty structure.\n      return { jsonOutput: defaultEmptyJsonOutputString };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;AAAA;AACA,mPAA8F,yBAAyB;;;;;;;AAEvH,oCAAoC;AACpC,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAChB,QAAQ,CACP;AAEN;AAOA,gFAAgF;AAChF,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAIO,eAAe,uCAAgB,GAAhB,mBAAmB,KAA8B;IACrE,OAAO,uBAAuB;AAChC;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAClD,MAAM;IACN,OAAO;QAAE,QAAQ;IAA8B;IAC/C,QAAQ;QAAE,QAAQ,6IAAA,CAAA,yBAAsB;IAAC;IACzC,QAAQ,CAAC;;;;;;;;;;;;wBAYa,CAAC;AACzB;AAEA,MAAM,yBAAyB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC1C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,QAAQ,GAAG,CAAC,iEAAiE,UAAU,UAAU,CAAC,MAAM;IAExG,MAAM,6BAA+C;QACnD,QAAQ;QACR,OAAO;QACP,MAAM;QACN,mBAAmB;QACnB,qBAAqB;QACrB,SAAS;QACT,QAAQ;QACR,WAAW,EAAE;IACf;IACA,MAAM,+BAA+B,KAAK,SAAS,CAAC;IAEpD,IAAI;QACF,uDAAuD;QACvD,MAAM,EAAE,QAAQ,cAAc,EAAE,GAAG,MAAM,4BAA4B;QAErE,IAAI,CAAC,gBAAgB;YACnB,QAAQ,KAAK,CAAC;YACd,OAAO;gBAAE,YAAY;YAA6B;QACpD;QAEA,yGAAyG;QACzG,gEAAgE;QAChE,MAAM,mBAAmB,KAAK,SAAS,CAAC;QACxC,QAAQ,GAAG,CAAC,sEAAsE,iBAAiB,SAAS,CAAC,GAAG,OAAO,CAAC,iBAAiB,MAAM,GAAG,MAAM,QAAQ,EAAE;QAClK,OAAO;YAAE,YAAY;QAAiB;IAExC,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,mFAAmF,MAAM,OAAO,EAAE,MAAM,KAAK;QAC3H,iGAAiG;QACjG,OAAO;YAAE,YAAY;QAA6B;IACpD;AACF;;;IAhEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 381, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/save-to-google-sheet.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Saves extracted PDF data to a Google Sheet.\n *\n * - saveToGoogleSheet - A function that handles saving data to Google Sheets.\n * - SaveToGoogleSheetInput - The input type for the saveToGoogleSheet function.\n * - SaveToGoogleSheetOutput - The return type for the saveToGoogleSheet function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { ExtractedPdfDataSchema } from '@/ai/schemas/pdf-data-schema'; // Import the schema from the new location\n\n// If you installed googleapis:\n// import { google } from 'googleapis';\n\nconst SaveToGoogleSheetInputSchema = z.object({\n  extractedData: ExtractedPdfDataSchema.describe(\"The structured data extracted from the PDF.\"),\n});\nexport type SaveToGoogleSheetInput = z.infer<typeof SaveToGoogleSheetInputSchema>;\n\nconst SaveToGoogleSheetOutputSchema = z.object({\n  success: z.boolean().describe('Whether the operation was successful.'),\n  message: z.string().optional().describe('A message detailing the outcome or error.'),\n  sheetUrl: z.string().optional().describe('The URL of the Google Sheet if successful.'),\n});\nexport type SaveToGoogleSheetOutput = z.infer<typeof SaveToGoogleSheetOutputSchema>;\n\nexport async function saveToGoogleSheet(input: SaveToGoogleSheetInput): Promise<SaveToGoogleSheetOutput> {\n  return saveToGoogleSheetFlow(input);\n}\n\nconst saveToGoogleSheetFlow = ai.defineFlow(\n  {\n    name: 'saveToGoogleSheetFlow',\n    inputSchema: SaveToGoogleSheetInputSchema,\n    outputSchema: SaveToGoogleSheetOutputSchema,\n  },\n  async (input) => {\n    console.log('Attempting to save data to Google Sheet:', JSON.stringify(input.extractedData, null, 2).substring(0, 500));\n\n    const sheetId = process.env.GOOGLE_SHEET_ID;\n    const serviceAccountJsonString = process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS_JSON;\n    const targetRange = process.env.GOOGLE_SHEET_TARGET_RANGE || 'Sheet1!A1'; // e.g., 'Sheet1!A1' or 'MyDataTab!A:H'\n\n    if (!sheetId) {\n      console.error('GOOGLE_SHEET_ID environment variable is not set.');\n      return { success: false, message: 'Google Sheet ID is not configured.' };\n    }\n    if (!serviceAccountJsonString) {\n      console.error('GOOGLE_SERVICE_ACCOUNT_CREDENTIALS_JSON environment variable is not set.');\n      return { success: false, message: 'Google Service Account credentials are not configured.' };\n    }\n\n    // Placeholder for actual Google Sheets API interaction\n    // You would implement this using the 'googleapis' library\n    //\n    // Example steps:\n    // 1. Parse `serviceAccountJsonString`\n    // const credentials = JSON.parse(serviceAccountJsonString);\n    // 2. Authenticate\n    // const auth = new google.auth.GoogleAuth({\n    //   credentials,\n    //   scopes: ['https://www.googleapis.com/auth/spreadsheets'],\n    // });\n    // const sheets = google.sheets({ version: 'v4', auth });\n    //\n    // 3. Define the header row (if not already present in your sheet)\n    //    This order should match the `values` array below.\n    const headerRow = [\n        'Classe', 'Cours', 'Date', 'Nom du Professeur', \n        'Nombre des Présents', 'Salle N°', 'Séance', 'Présences (JSON)'\n    ];\n    //\n    // 4. Prepare data for the new row\n    //    Ensure the order matches your headerRow and sheet structure.\n    const newRowData = [\n      input.extractedData.classe,\n      input.extractedData.cours,\n      input.extractedData.date,\n      input.extractedData.nom_du_professeur,\n      input.extractedData.nombre_des_présents,\n      input.extractedData.salle_n,\n      input.extractedData.séance,\n      JSON.stringify(input.extractedData.présences || []), // Store array as JSON string\n    ];\n    //\n    // 5. Append data\n    // try {\n    //   // Optional: Check if header exists, if not, append it first.\n    //   // For simplicity, this example assumes headers are managed or just appends.\n    //\n    //   await sheets.spreadsheets.values.append({\n    //     spreadsheetId: sheetId,\n    //     range: targetRange, // e.g., 'Sheet1!A1' - appends after the last row with data in this range.\n    //     valueInputOption: 'USER_ENTERED', // or 'RAW'\n    //     requestBody: {\n    //       values: [newRowData], // Data must be an array of arrays\n    //     },\n    //   });\n    //   const sheetUrl = `https://docs.google.com/spreadsheets/d/${sheetId}`;\n    //   console.log(`Data successfully appended to Google Sheet: ${sheetUrl}`);\n    //   return { success: true, message: 'Data saved to Google Sheet.', sheetUrl };\n    // } catch (error: any) {\n    //   console.error('Error appending data to Google Sheet:', error.message, error.stack);\n    //   return { success: false, message: `Failed to save to Google Sheet: ${error.message}` };\n    // }\n\n    // --- Placeholder Response ---\n    // Remove this section once you implement the actual Google Sheets API call above.\n    console.warn('Google Sheets API interaction is not implemented. This is a placeholder.');\n    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay\n    const sheetUrl = `https://docs.google.com/spreadsheets/d/${sheetId}`;\n    return { \n        success: true, // Simulate success\n        message: 'Data saved to Google Sheet (Simulated). Implement actual API call.',\n        sheetUrl: sheetUrl\n    };\n    // --- End Placeholder Response ---\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA,mPAAuE,0CAA0C;;;;;;;AAEjH,+BAA+B;AAC/B,uCAAuC;AAEvC,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,eAAe,6IAAA,CAAA,yBAAsB,CAAC,QAAQ,CAAC;AACjD;AAGA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IACxC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC3C;AAGO,eAAe,uCAAe,GAAf,kBAAkB,KAA6B;IACnE,OAAO,sBAAsB;AAC/B;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACzC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,QAAQ,GAAG,CAAC,4CAA4C,KAAK,SAAS,CAAC,MAAM,aAAa,EAAE,MAAM,GAAG,SAAS,CAAC,GAAG;IAElH,MAAM,UAAU,QAAQ,GAAG,CAAC,eAAe;IAC3C,MAAM,2BAA2B,QAAQ,GAAG,CAAC,uCAAuC;IACpF,MAAM,cAAc,QAAQ,GAAG,CAAC,yBAAyB,IAAI,aAAa,uCAAuC;IAEjH,IAAI,CAAC,SAAS;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,SAAS;YAAO,SAAS;QAAqC;IACzE;IACA,IAAI,CAAC,0BAA0B;QAC7B,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,SAAS;YAAO,SAAS;QAAyD;IAC7F;IAEA,uDAAuD;IACvD,0DAA0D;IAC1D,EAAE;IACF,iBAAiB;IACjB,sCAAsC;IACtC,4DAA4D;IAC5D,kBAAkB;IAClB,4CAA4C;IAC5C,iBAAiB;IACjB,8DAA8D;IAC9D,MAAM;IACN,yDAAyD;IACzD,EAAE;IACF,kEAAkE;IAClE,uDAAuD;IACvD,MAAM,YAAY;QACd;QAAU;QAAS;QAAQ;QAC3B;QAAuB;QAAY;QAAU;KAChD;IACD,EAAE;IACF,kCAAkC;IAClC,kEAAkE;IAClE,MAAM,aAAa;QACjB,MAAM,aAAa,CAAC,MAAM;QAC1B,MAAM,aAAa,CAAC,KAAK;QACzB,MAAM,aAAa,CAAC,IAAI;QACxB,MAAM,aAAa,CAAC,iBAAiB;QACrC,MAAM,aAAa,CAAC,mBAAmB;QACvC,MAAM,aAAa,CAAC,OAAO;QAC3B,MAAM,aAAa,CAAC,MAAM;QAC1B,KAAK,SAAS,CAAC,MAAM,aAAa,CAAC,SAAS,IAAI,EAAE;KACnD;IACD,EAAE;IACF,iBAAiB;IACjB,QAAQ;IACR,kEAAkE;IAClE,iFAAiF;IACjF,EAAE;IACF,8CAA8C;IAC9C,8BAA8B;IAC9B,qGAAqG;IACrG,oDAAoD;IACpD,qBAAqB;IACrB,iEAAiE;IACjE,SAAS;IACT,QAAQ;IACR,0EAA0E;IAC1E,4EAA4E;IAC5E,gFAAgF;IAChF,yBAAyB;IACzB,wFAAwF;IACxF,4FAA4F;IAC5F,IAAI;IAEJ,+BAA+B;IAC/B,kFAAkF;IAClF,QAAQ,IAAI,CAAC;IACb,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS,QAAQ,yBAAyB;IAClF,MAAM,WAAW,CAAC,uCAAuC,EAAE,SAAS;IACpE,OAAO;QACH,SAAS;QACT,SAAS;QACT,UAAU;IACd;AACA,mCAAmC;AACrC;;;IA3FoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 520, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 590, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 604, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}