{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/extract-data-from-pdf.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Extracts data from a PDF using AI (Genkit).\n *\n * - extractDataFromPdf - A function that handles the data extraction process.\n * - ExtractDataFromPdfInput - The input type for the extractDataFromPdf function.\n * - ExtractDataFromPdfOutput - The return type for the extractDataFromPdf function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport {z} from 'genkit';\nimport type { ExtractedPdfData} from '@/ai/schemas/pdf-data-schema'; // Import the type\nimport { ExtractedPdfDataSchema } from '@/ai/schemas/pdf-data-schema'; // Import the Zod schema\n\n// Schema for the overall flow input\nconst ExtractDataFromPdfInputSchema = z.object({\n pdfDataUri: z.string()\n    .describe(\n      \"The PDF document, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type ExtractDataFromPdfInput = z.infer<typeof ExtractDataFromPdfInputSchema>;\n\n// Schema for the flow's final output to the frontend\nconst ExtractDataFromPdfOutputSchema = z.object({\n  jsonOutput: z.string().describe('The extracted data from the PDF, as a JSON string.'),\n  error: z.string().optional().describe('An error message if extraction failed.'),\n});\nexport type ExtractDataFromPdfOutput = z.infer<typeof ExtractDataFromPdfOutputSchema>;\n\n\nexport async function extractDataFromPdf(input: ExtractDataFromPdfInput): Promise<ExtractDataFromPdfOutput> {\n  return extractDataFromPdfFlow(input);\n}\n\nconst extractDataFromPdfPromptObj = ai.definePrompt({\n  name: 'extractDataFromPdfPrompt',\n  input: { schema: ExtractDataFromPdfInputSchema }, // AI prompt still takes the PDF URI\n  output: { schema: ExtractedPdfDataSchema }, // AI is asked to output the direct data structure\n  prompt: `You are an expert data extraction specialist.\nYou will receive a PDF document. Your task is to analyze this document and extract all the relevant information from it.\n\nReturn the extracted data as a JSON object strictly conforming to the provided schema.\n\nCRITICAL INSTRUCTION FOR HANDLING MISSING DATA:\n- For all string fields (e.g., \\`classe\\`, \\`cours\\`, \\`date\\`, \\`nom_du_professeur\\`, \\`salle_n\\`, \\`séance\\`, and within \\`présences\\`: \\`n\\`, \\`nom_prénom\\`), if the information cannot be found or determined from the PDF, you MUST use an empty string \\`\"\"\\` as its value for that field.\n- For the \\`nombre_des_présents\\` field (a number), if it cannot be determined, you MUST use the number \\`0\\` as its value.\n- For the \\`présences\\` array, if no attendees are found or the data is missing for all attendees, you MUST use an empty array \\`[]\\` as its value. If some attendees are found but some details are missing for an individual attendee, apply the empty string rule for their \\`n\\` or \\`nom_prénom\\` fields.\n- DO NOT OMIT ANY KEYS specified in the schema. The goal is to always return a JSON object that strictly conforms to the defined structure, using these empty/default values for missing information.\n\nPDF Document:\n{{media url=pdfDataUri}}`,\n});\n\nconst extractDataFromPdfFlow = ai.defineFlow(\n  {\n    name: 'extractDataFromPdfFlow',\n    inputSchema: ExtractDataFromPdfInputSchema,\n    outputSchema: ExtractDataFromPdfOutputSchema, // Flow outputs the stringified version + optional error\n  },\n  async (flowInput) => {\n    console.log('Input to Genkit flow for PDF processing. PDF Data URI length:', flowInput.pdfDataUri.length);\n\n    const defaultEmptyStructuredData: ExtractedPdfData = { // Use the imported type\n      classe: \"\",\n      cours: \"\",\n      date: \"\",\n      nom_du_professeur: \"\",\n      nombre_des_présents: 0,\n      salle_n: \"\",\n      séance: \"\",\n      présences: [],\n    };\n    const defaultEmptyJsonOutputString = JSON.stringify(defaultEmptyStructuredData);\n\n    try {\n      // The prompt is expected to return an object matching ExtractedPdfDataSchema\n      const { output: structuredData } = await extractDataFromPdfPromptObj(flowInput);\n\n      if (!structuredData) {\n        const errorMessage = \"AI model did not return structured data.\";\n        console.error(errorMessage, 'Input to prompt:', flowInput);\n        return { jsonOutput: defaultEmptyJsonOutputString, error: errorMessage };\n      }\n      \n      // Now, stringify this structured data for the jsonOutput field.\n      const jsonOutputString = JSON.stringify(structuredData);\n      console.log('Successfully extracted data from AI. Stringified output (snippet):', jsonOutputString.substring(0, 250) + (jsonOutputString.length > 250 ? \"...\" : \"\"));\n      return { jsonOutput: jsonOutputString }; // No error\n\n    } catch (error: any) {\n      const errorMessage = `AI processing error: ${error.message}`;\n      console.error('Error during AI model interaction or data processing in extractDataFromPdfFlow:', error.message, error.stack, 'Input to prompt:', flowInput);\n      return { jsonOutput: defaultEmptyJsonOutputString, error: errorMessage };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;;;;;;;AAIA,oCAAoC;AACpC,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAChB,QAAQ,CACP;AAEN;AAGA,qDAAqD;AACrD,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACxC;AAIO,eAAe,uCAAgB,GAAhB,mBAAmB,KAA8B;IACrE,OAAO,uBAAuB;AAChC;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAClD,MAAM;IACN,OAAO;QAAE,QAAQ;IAA8B;IAC/C,QAAQ;QAAE,QAAQ;IAAuB;IACzC,QAAQ,CAAC;;;;;;;;;;;;wBAYa,CAAC;AACzB;AAEA,MAAM,yBAAyB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC1C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,QAAQ,GAAG,CAAC,iEAAiE,UAAU,UAAU,CAAC,MAAM;IAExG,MAAM,6BAA+C;QACnD,QAAQ;QACR,OAAO;QACP,MAAM;QACN,mBAAmB;QACnB,qBAAqB;QACrB,SAAS;QACT,QAAQ;QACR,WAAW,EAAE;IACf;IACA,MAAM,+BAA+B,KAAK,SAAS,CAAC;IAEpD,IAAI;QACF,6EAA6E;QAC7E,MAAM,EAAE,QAAQ,cAAc,EAAE,GAAG,MAAM,4BAA4B;QAErE,IAAI,CAAC,gBAAgB;YACnB,MAAM,eAAe;YACrB,QAAQ,KAAK,CAAC,cAAc,oBAAoB;YAChD,OAAO;gBAAE,YAAY;gBAA8B,OAAO;YAAa;QACzE;QAEA,gEAAgE;QAChE,MAAM,mBAAmB,KAAK,SAAS,CAAC;QACxC,QAAQ,GAAG,CAAC,sEAAsE,iBAAiB,SAAS,CAAC,GAAG,OAAO,CAAC,iBAAiB,MAAM,GAAG,MAAM,QAAQ,EAAE;QAClK,OAAO;YAAE,YAAY;QAAiB,GAAG,WAAW;IAEtD,EAAE,OAAO,OAAY;QACnB,MAAM,eAAe,CAAC,qBAAqB,EAAE,MAAM,OAAO,EAAE;QAC5D,QAAQ,KAAK,CAAC,mFAAmF,MAAM,OAAO,EAAE,MAAM,KAAK,EAAE,oBAAoB;QACjJ,OAAO;YAAE,YAAY;YAA8B,OAAO;QAAa;IACzE;AACF;;;IAhEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}