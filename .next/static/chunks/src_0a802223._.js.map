{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,6JACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG3B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,6LAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,iBAAiB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/radio-group.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,6LAAC,6KAAA,CAAA,OAAwB;QACvB,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;QAC3B,GAAG,KAAK;QACT,KAAK;;;;;;AAGX;;AACA,WAAW,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,6LAAC,6KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4OACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,6KAAA,CAAA,YAA6B;YAAC,WAAU;sBACvC,cAAA,6LAAC,yMAAA,CAAA,SAAM;gBAAC,WAAU;;;;;;;;;;;;;;;;AAI1B;;AACA,eAAe,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 399, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/pdf-viewer.tsx"],"sourcesContent":["\"use client\";\n\nimport type { FC } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FileText } from 'lucide-react';\n\ninterface PdfViewerProps {\n  pdfUrl: string | null;\n}\n\nconst PdfViewer: FC<PdfViewerProps> = ({ pdfUrl }) => {\n  return (\n    <Card className=\"h-full flex flex-col shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <FileText className=\"w-5 h-5 text-primary\" />\n          PDF Viewer\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"flex-grow p-0\">\n        {pdfUrl ? (\n          <iframe\n            src={pdfUrl}\n            className=\"w-full h-full border-0\"\n            title=\"PDF Viewer\"\n            aria-label=\"PDF Document Viewer\"\n          />\n        ) : (\n          <div className=\"flex flex-col items-center justify-center h-full text-muted-foreground p-6\">\n            <FileText className=\"w-16 h-16 mb-4\" />\n            <p className=\"text-lg\">Upload a PDF to view it here.</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PdfViewer;\n"],"names":[],"mappings":";;;;AAGA;AACA;AAJA;;;;AAUA,MAAM,YAAgC,CAAC,EAAE,MAAM,EAAE;IAC/C,qBACE,6LAAC,mIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,6LAAC,mIAAA,CAAA,aAAU;0BACT,cAAA,6LAAC,mIAAA,CAAA,YAAS;oBAAC,WAAU;;sCACnB,6LAAC,iNAAA,CAAA,WAAQ;4BAAC,WAAU;;;;;;wBAAyB;;;;;;;;;;;;0BAIjD,6LAAC,mIAAA,CAAA,cAAW;gBAAC,WAAU;0BACpB,uBACC,6LAAC;oBACC,KAAK;oBACL,WAAU;oBACV,OAAM;oBACN,cAAW;;;;;yCAGb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC,iNAAA,CAAA,WAAQ;4BAAC,WAAU;;;;;;sCACpB,6LAAC;4BAAE,WAAU;sCAAU;;;;;;;;;;;;;;;;;;;;;;;AAMnC;KA1BM;uCA4BS","debugId":null}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 531, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/data-editor.tsx"],"sourcesContent":["\"use client\";\n\nimport type { FC } from 'react';\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Edit3 } from 'lucide-react';\n\ninterface DataEditorProps {\n  data: Record<string, any> | null;\n  onDataChange: (updatedData: Record<string, any>) => void;\n}\n\nconst DataEditor: FC<DataEditorProps> = ({ data, onDataChange }) => {\n  const handleChange = (key: string, newValue: string, isJson: boolean) => {\n    if (!data) return;\n\n    const updated = { ...data };\n    if (isJson) {\n      try {\n        // Allow user to type partial/invalid JSON without crashing,\n        // actual parsing happens when downloading or further processing.\n        updated[key] = JSON.parse(newValue); // Attempt to parse for immediate feedback if possible\n      } catch (e) {\n        // If JSON is invalid during typing, store the raw string.\n        // The parent component or download function will need to validate.\n        updated[key] = newValue; // Store as string if parse fails\n      }\n    } else {\n      const originalValue = data[key];\n      if (typeof originalValue === 'number') {\n        const parsedFloat = parseFloat(newValue);\n        updated[key] = isNaN(parsedFloat) ? newValue : parsedFloat;\n      } else if (typeof originalValue === 'boolean') {\n        updated[key] = newValue.toLowerCase() === 'true';\n      } else {\n        updated[key] = newValue;\n      }\n    }\n    onDataChange(updated);\n  };\n\n  const getDisplayValue = (value: any): string => {\n    if (typeof value === 'string') return value;\n    if (typeof value === 'number' || typeof value === 'boolean') return String(value);\n    if (value === null || value === undefined) return '';\n    // If it's an object that was previously stringified due to invalid JSON, show that string\n    // otherwise stringify the object.\n    return typeof value === 'string' ? value : JSON.stringify(value, null, 2);\n  }\n\n  return (\n    <Card className=\"h-full flex flex-col shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Edit3 className=\"w-5 h-5 text-primary\" />\n          Extracted Data\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"flex-grow overflow-y-auto\">\n        {!data ? (\n          <div className=\"flex flex-col items-center justify-center h-full text-muted-foreground\">\n            <Edit3 className=\"w-16 h-16 mb-4\" />\n            <p className=\"text-lg\">Extracted data will appear here for editing.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {Object.entries(data).map(([key, value]) => (\n              <div key={key} className=\"space-y-2\">\n                <Label htmlFor={key} className=\"text-base font-semibold text-foreground\">\n                  {key.replace(/([A-Z])/g, ' $1').replace(/^./, (str) => str.toUpperCase())}\n                </Label>\n                {typeof value === 'object' && value !== null && typeof value !== 'string' ? (\n                  <Textarea\n                    id={key}\n                    value={getDisplayValue(value)}\n                    onChange={(e) => handleChange(key, e.target.value, true)}\n                    className=\"font-mono text-sm rounded-md shadow-sm min-h-[100px]\"\n                    rows={Math.min(10, getDisplayValue(value).split('\\n').length)}\n                    aria-label={`Edit ${key} JSON data`}\n                  />\n                ) : (\n                  <Input\n                    id={key}\n                    value={getDisplayValue(value)}\n                    onChange={(e) => handleChange(key, e.target.value, false)}\n                    className=\"text-sm rounded-md shadow-sm\"\n                    aria-label={`Edit ${key} value`}\n                  />\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default DataEditor;\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AAPA;;;;;;;AAcA,MAAM,aAAkC,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE;IAC7D,MAAM,eAAe,CAAC,KAAa,UAAkB;QACnD,IAAI,CAAC,MAAM;QAEX,MAAM,UAAU;YAAE,GAAG,IAAI;QAAC;QAC1B,IAAI,QAAQ;YACV,IAAI;gBACF,4DAA4D;gBAC5D,iEAAiE;gBACjE,OAAO,CAAC,IAAI,GAAG,KAAK,KAAK,CAAC,WAAW,sDAAsD;YAC7F,EAAE,OAAO,GAAG;gBACV,0DAA0D;gBAC1D,mEAAmE;gBACnE,OAAO,CAAC,IAAI,GAAG,UAAU,iCAAiC;YAC5D;QACF,OAAO;YACL,MAAM,gBAAgB,IAAI,CAAC,IAAI;YAC/B,IAAI,OAAO,kBAAkB,UAAU;gBACrC,MAAM,cAAc,WAAW;gBAC/B,OAAO,CAAC,IAAI,GAAG,MAAM,eAAe,WAAW;YACjD,OAAO,IAAI,OAAO,kBAAkB,WAAW;gBAC7C,OAAO,CAAC,IAAI,GAAG,SAAS,WAAW,OAAO;YAC5C,OAAO;gBACL,OAAO,CAAC,IAAI,GAAG;YACjB;QACF;QACA,aAAa;IACf;IAEA,MAAM,kBAAkB,CAAC;QACvB,IAAI,OAAO,UAAU,UAAU,OAAO;QACtC,IAAI,OAAO,UAAU,YAAY,OAAO,UAAU,WAAW,OAAO,OAAO;QAC3E,IAAI,UAAU,QAAQ,UAAU,WAAW,OAAO;QAClD,0FAA0F;QAC1F,kCAAkC;QAClC,OAAO,OAAO,UAAU,WAAW,QAAQ,KAAK,SAAS,CAAC,OAAO,MAAM;IACzE;IAEA,qBACE,6LAAC,mIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,6LAAC,mIAAA,CAAA,aAAU;0BACT,cAAA,6LAAC,mIAAA,CAAA,YAAS;oBAAC,WAAU;;sCACnB,6LAAC,6MAAA,CAAA,QAAK;4BAAC,WAAU;;;;;;wBAAyB;;;;;;;;;;;;0BAI9C,6LAAC,mIAAA,CAAA,cAAW;gBAAC,WAAU;0BACpB,CAAC,qBACA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC,6MAAA,CAAA,QAAK;4BAAC,WAAU;;;;;;sCACjB,6LAAC;4BAAE,WAAU;sCAAU;;;;;;;;;;;yCAGzB,6LAAC;oBAAI,WAAU;8BACZ,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,iBACrC,6LAAC;4BAAc,WAAU;;8CACvB,6LAAC,oIAAA,CAAA,QAAK;oCAAC,SAAS;oCAAK,WAAU;8CAC5B,IAAI,OAAO,CAAC,YAAY,OAAO,OAAO,CAAC,MAAM,CAAC,MAAQ,IAAI,WAAW;;;;;;gCAEvE,OAAO,UAAU,YAAY,UAAU,QAAQ,OAAO,UAAU,yBAC/D,6LAAC,uIAAA,CAAA,WAAQ;oCACP,IAAI;oCACJ,OAAO,gBAAgB;oCACvB,UAAU,CAAC,IAAM,aAAa,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE;oCACnD,WAAU;oCACV,MAAM,KAAK,GAAG,CAAC,IAAI,gBAAgB,OAAO,KAAK,CAAC,MAAM,MAAM;oCAC5D,cAAY,CAAC,KAAK,EAAE,IAAI,UAAU,CAAC;;;;;yDAGrC,6LAAC,oIAAA,CAAA,QAAK;oCACJ,IAAI;oCACJ,OAAO,gBAAgB;oCACvB,UAAU,CAAC,IAAM,aAAa,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE;oCACnD,WAAU;oCACV,cAAY,CAAC,KAAK,EAAE,IAAI,MAAM,CAAC;;;;;;;2BAnB3B;;;;;;;;;;;;;;;;;;;;;AA6BxB;KApFM;uCAsFS","debugId":null}},
    {"offset": {"line": 707, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/extract-data-from-pdf.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Extracts data from a PDF using AI (Genkit), with an option for Google Cloud Vision OCR.\n *\n * - extractDataFromPdf - A function that handles the data extraction process.\n * - ExtractDataFromPdfInput - The input type for the extractDataFromPdf function.\n * - ExtractDataFromPdfOutput - The return type for the extractDataFromPdf function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { ImageAnnotatorClient } from '@google-cloud/vision';\nimport type { ExtractedPdfData } from '@/ai/schemas/pdf-data-schema'; \nimport { ExtractedPdfDataSchema } from '@/ai/schemas/pdf-data-schema'; \n\n// Schema for the overall flow input\nconst ExtractDataFromPdfInputSchema = z.object({\n  pdfDataUri: z.string().describe(\n    \"The PDF document, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n  ),\n  extractionEngine: z.enum(['genkitDirect', 'googleCloudVision'])\n    .default('genkitDirect')\n    .describe('The engine to use for PDF data extraction.'),\n});\nexport type ExtractDataFromPdfInput = z.infer<typeof ExtractDataFromPdfInputSchema>;\n\n// Schema for the flow's final output to the frontend\nconst ExtractDataFromPdfOutputSchema = z.object({\n  jsonOutput: z.string().describe('The extracted data from the PDF, as a JSON string.'),\n  error: z.string().optional().describe('An error message if extraction failed.'),\n});\nexport type ExtractDataFromPdfOutput = z.infer<typeof ExtractDataFromPdfOutputSchema>;\n\nexport async function extractDataFromPdf(input: ExtractDataFromPdfInput): Promise<ExtractDataFromPdfOutput> {\n  return extractDataFromPdfFlow(input);\n}\n\n// Prompt for direct PDF processing by Genkit AI\nconst genkitDirectPdfProcessPrompt = ai.definePrompt({\n  name: 'genkitDirectPdfProcessPrompt',\n  input: { schema: z.object({ pdfDataUri: ExtractDataFromPdfInputSchema.shape.pdfDataUri }) },\n  output: { schema: ExtractedPdfDataSchema },\n  prompt: `You are an expert data extraction specialist.\nYou will receive a PDF document. Your task is to analyze this document and extract all the relevant information from it.\nReturn the extracted data as a JSON object strictly conforming to the provided schema.\n\nCRITICAL INSTRUCTION FOR HANDLING MISSING DATA:\n- For all string fields (e.g., \\`classe\\`, \\`cours\\`, \\`date\\`, \\`nom_du_professeur\\`, \\`salle_n\\`, \\`séance\\`, and within \\`présences\\`: \\`n\\`, \\`nom_prénom\\`), if the information cannot be found or determined from the PDF, you MUST use an empty string \\`\"\"\\` as its value for that field.\n- For the \\`nombre_des_présents\\` field (a number), if it cannot be determined, you MUST use the number \\`0\\` as its value.\n- For the \\`présences\\` array, if no attendees are found or the data is missing for all attendees, you MUST use an empty array \\`[]\\` as its value. If some attendees are found but some details are missing for an individual attendee, apply the empty string rule for their \\`n\\` or \\`nom_prénom\\` fields.\n- DO NOT OMIT ANY KEYS specified in the schema. The goal is to always return a JSON object that strictly conforms to the defined structure, using these empty/default values for missing information.\n\nPDF Document:\n{{media url=pdfDataUri}}`,\n});\n\n// Prompt for structuring text extracted by an external OCR (like Google Cloud Vision)\nconst structureOcrTextPrompt = ai.definePrompt({\n  name: 'structureOcrTextPrompt',\n  input: { schema: z.object({ ocrText: z.string().describe(\"Text extracted from a document by an OCR engine.\") }) },\n  output: { schema: ExtractedPdfDataSchema },\n  prompt: `You are an expert data extraction specialist.\nYou will receive text that has been extracted from a document using an OCR engine. Your task is to analyze this text and extract all the relevant information from it.\nReturn the extracted data as a JSON object strictly conforming to the provided schema.\n\nCRITICAL INSTRUCTION FOR HANDLING MISSING DATA:\n- For all string fields (e.g., \\`classe\\`, \\`cours\\`, \\`date\\`, \\`nom_du_professeur\\`, \\`salle_n\\`, \\`séance\\`, and within \\`présences\\`: \\`n\\`, \\`nom_prénom\\`), if the information cannot be found or determined from the text, you MUST use an empty string \\`\"\"\\` as its value for that field.\n- For the \\`nombre_des_présents\\` field (a number), if it cannot be determined, you MUST use the number \\`0\\` as its value.\n- For the \\`présences\\` array, if no attendees are found or the data is missing for all attendees, you MUST use an empty array \\`[]\\` as its value. If some attendees are found but some details are missing for an individual attendee, apply the empty string rule for their \\`n\\` or \\`nom_prénom\\` fields.\n- DO NOT OMIT ANY KEYS specified in the schema. The goal is to always return a JSON object that strictly conforms to the defined structure, using these empty/default values for missing information.\n\nOCR'd Text:\n{{{ocrText}}}`,\n});\n\n\nconst extractDataFromPdfFlow = ai.defineFlow(\n  {\n    name: 'extractDataFromPdfFlow',\n    inputSchema: ExtractDataFromPdfInputSchema,\n    outputSchema: ExtractDataFromPdfOutputSchema, \n  },\n  async (flowInput) => {\n    console.log(`Starting PDF data extraction with engine: ${flowInput.extractionEngine}`);\n\n    const defaultEmptyStructuredData: ExtractedPdfData = {\n      classe: \"\", cours: \"\", date: \"\", nom_du_professeur: \"\",\n      nombre_des_présents: 0, salle_n: \"\", séance: \"\", présences: [],\n    };\n    const defaultEmptyJsonOutputString = JSON.stringify(defaultEmptyStructuredData);\n\n    try {\n      let structuredData: ExtractedPdfData | null = null;\n\n      if (flowInput.extractionEngine === 'googleCloudVision') {\n        console.log('Using Google Cloud Vision OCR engine.');\n        const serviceAccountCredsJsonString = process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS_JSON;\n        if (!serviceAccountCredsJsonString) {\n          return { jsonOutput: defaultEmptyJsonOutputString, error: 'Google Service Account credentials are not configured for Vision API.' };\n        }\n\n        let visionCredentials;\n        try {\n          visionCredentials = JSON.parse(serviceAccountCredsJsonString);\n           if (visionCredentials && visionCredentials.private_key) {\n             visionCredentials.private_key = visionCredentials.private_key.replace(/\\\\n/g, '\\n');\n           }\n        } catch (e: any) {\n          console.error('Failed to parse Google Service Account credentials for Vision API:', e.message);\n          return { jsonOutput: defaultEmptyJsonOutputString, error: `Invalid Google Service Account credentials format for Vision API: ${e.message}` };\n        }\n        \n        const visionClient = new ImageAnnotatorClient({ credentials: visionCredentials });\n        \n        const base64PdfData = flowInput.pdfDataUri.substring(flowInput.pdfDataUri.indexOf(',') + 1);\n        \n        const request = {\n          requests: [\n            {\n              inputConfig: {\n                content: base64PdfData,\n                mimeType: 'application/pdf',\n              },\n              features: [{ type: 'DOCUMENT_TEXT_DETECTION' }],\n            },\n          ],\n        };\n\n        console.log('Sending PDF to Google Cloud Vision API for OCR...');\n        const [visionResult] = await visionClient.batchAnnotateFiles(request as any); // Cast to any to match SDK\n        const responses = visionResult.responses?.[0]?.responses;\n\n        if (!responses || responses.length === 0 || !responses[0].fullTextAnnotation) {\n          console.error('Google Cloud Vision API did not return text annotation.');\n          return { jsonOutput: defaultEmptyJsonOutputString, error: 'Google Cloud Vision OCR did not return text. The PDF might be image-only or unreadable by OCR.' };\n        }\n        \n        const ocrText = responses[0].fullTextAnnotation.text || \"\";\n        console.log('OCR Text from Vision API (first 500 chars):', ocrText.substring(0, 500));\n\n        if (!ocrText.trim()) {\n            console.warn('Vision API returned empty text from OCR.');\n            return { jsonOutput: defaultEmptyJsonOutputString, error: 'Google Cloud Vision OCR returned empty text.' };\n        }\n\n        const { output: visionStructuredData } = await structureOcrTextPrompt({ ocrText });\n        structuredData = visionStructuredData;\n\n      } else { // Default to 'genkitDirect'\n        console.log('Using Genkit Direct AI engine.');\n        const { output: genkitStructuredData } = await genkitDirectPdfProcessPrompt({ pdfDataUri: flowInput.pdfDataUri });\n        structuredData = genkitStructuredData;\n      }\n\n      if (!structuredData) {\n        const errorMessage = \"AI model did not return structured data after processing.\";\n        console.error(errorMessage, 'Input to prompt:', flowInput);\n        return { jsonOutput: defaultEmptyJsonOutputString, error: errorMessage };\n      }\n      \n      const jsonOutputString = JSON.stringify(structuredData);\n      console.log('Successfully extracted data. Stringified output (snippet):', jsonOutputString.substring(0, 250) + (jsonOutputString.length > 250 ? \"...\" : \"\"));\n      return { jsonOutput: jsonOutputString };\n\n    } catch (error: any) {\n      let errorMessage = `AI processing error: ${error.message}`;\n      if (error.response?.data?.error?.message) { // For Google API specific errors\n        errorMessage += ` Google API Error: ${error.response.data.error.message}`;\n      }\n      console.error('Error during data extraction flow:', error.message, error.stack, 'Input:', flowInput);\n      return { jsonOutput: defaultEmptyJsonOutputString, error: errorMessage };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;IAkCsB","debugId":null}},
    {"offset": {"line": 719, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/save-to-google-sheet.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Saves extracted PDF data to a Google Sheet.\n * Each student will be on a new row, with other PDF data repeated.\n * If data for the same documentInstanceId already exists, it's deleted before appending.\n * Operations are performed on the *first sheet* found in the spreadsheet.\n *\n * - saveToGoogleSheet - A function that handles saving data to Google Sheets.\n * - SaveToGoogleSheetInput - The input type for the saveToGoogleSheet function.\n * - SaveToGoogleSheetOutput - The return type for the saveToGoogleSheet function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { ExtractedPdfDataSchema } from '@/ai/schemas/pdf-data-schema';\nimport { google, type sheets_v4 } from 'googleapis';\n\nconst SaveToGoogleSheetInputSchema = z.object({\n  extractedData: ExtractedPdfDataSchema,\n  documentInstanceId: z.string().describe('A unique identifier for this PDF processing instance.'),\n});\nexport type SaveToGoogleSheetInput = z.infer<typeof SaveToGoogleSheetInputSchema>;\n\nconst SaveToGoogleSheetOutputSchema = z.object({\n  success: z.boolean().describe('Whether the save operation was successful.'),\n  message: z.string().describe('A message detailing the outcome of the save operation.'),\n  spreadsheetId: z.string().optional().describe('The ID of the spreadsheet.'),\n  updatedRange: z.string().optional().describe('The range that was updated in A1 notation.'),\n});\nexport type SaveToGoogleSheetOutput = z.infer<typeof SaveToGoogleSheetOutputSchema>;\n\nexport async function saveToGoogleSheet(input: SaveToGoogleSheetInput): Promise<SaveToGoogleSheetOutput> {\n  return saveToGoogleSheetFlow(input);\n}\n\nconst saveToGoogleSheetFlow = ai.defineFlow(\n  {\n    name: 'saveToGoogleSheetFlow',\n    inputSchema: SaveToGoogleSheetInputSchema,\n    outputSchema: SaveToGoogleSheetOutputSchema,\n  },\n  async ({ extractedData: data, documentInstanceId }) => {\n    const spreadsheetId = process.env.GOOGLE_SHEET_ID;\n    const serviceAccountCredsJsonString = process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS_JSON;\n\n    if (!spreadsheetId) {\n      return { success: false, message: 'Google Sheet ID is not configured in environment variables.' };\n    }\n    if (!serviceAccountCredsJsonString) {\n      return { success: false, message: 'Google Service Account credentials are not configured in environment variables.' };\n    }\n\n    let credentials;\n    try {\n      credentials = JSON.parse(serviceAccountCredsJsonString);\n      if (credentials && credentials.private_key) {\n        // Ensure private_key newlines are correctly formatted for the googleapis library\n        credentials.private_key = credentials.private_key.replace(/\\\\n/g, '\\n');\n      }\n    } catch (error: any) {\n      console.error('Failed to parse Google Service Account credentials JSON:', error.message);\n      return { success: false, message: `Invalid Google Service Account credentials JSON format: ${error.message}` };\n    }\n    \n    if (!credentials || !credentials.client_email || !credentials.private_key) {\n        return { success: false, message: 'Parsed Google Service Account credentials missing required fields (client_email or private_key).' };\n    }\n\n    try {\n      const auth = new google.auth.GoogleAuth({\n        credentials,\n        scopes: ['https://www.googleapis.com/auth/spreadsheets'],\n      });\n      const sheets = google.sheets({ version: 'v4', auth });\n\n      // --- Get properties of the first sheet ---\n      let firstSheetProperties;\n      let actualSheetNameUsed: string;\n      let actualSheetIdNumberUsed: number;\n\n      try {\n          const spreadsheetDetails = await sheets.spreadsheets.get({\n            spreadsheetId,\n            fields: 'sheets(properties(sheetId,title))', // Efficiently get only sheetId and title for all sheets\n          });\n\n          if (!spreadsheetDetails.data.sheets || spreadsheetDetails.data.sheets.length === 0) {\n            return { success: false, message: 'The specified spreadsheet contains no sheets.' };\n          }\n          // Assume we operate on the first sheet (gid=0 equivalent)\n          const firstSheet = spreadsheetDetails.data.sheets[0];\n          if (!firstSheet.properties || typeof firstSheet.properties.sheetId !== 'number' || !firstSheet.properties.title) {\n            return { success: false, message: 'Could not retrieve valid properties (ID and Title) for the first sheet.' };\n          }\n          firstSheetProperties = firstSheet.properties;\n          actualSheetNameUsed = firstSheetProperties.title;\n          actualSheetIdNumberUsed = firstSheetProperties.sheetId;\n\n      } catch (e: any) {\n          console.error(\"Failed to get spreadsheet details (for sheetId/title):\", e.message);\n          return { success: false, message: `Failed to get spreadsheet details: ${e.message}` };\n      }\n\n      console.log(`Operating on sheet titled: '${actualSheetNameUsed}' with numerical ID: ${actualSheetIdNumberUsed}`);\n\n      const newHeaderRow = [\n        'DocumentInstanceID',\n        'Classe',\n        'Cours',\n        'Date',\n        'Nom du Professeur',\n        'Nombre des Présents (du PDF)',\n        'Salle N°',\n        'Séance',\n        'N° Étudiant',\n        'Nom & Prénom Étudiant',\n      ];\n      const documentInstanceIdColumnIndex = 0; \n\n      // --- 1. Check and write header if necessary ---\n      let sheetNeedsHeader = true;\n      try {\n        const headerCheckRange = `${actualSheetNameUsed}!A1:${String.fromCharCode(64 + newHeaderRow.length)}1`;\n        const headerCheck = await sheets.spreadsheets.values.get({\n            spreadsheetId,\n            range: headerCheckRange,\n        });\n        if (headerCheck.data.values && headerCheck.data.values.length > 0) {\n            if (JSON.stringify(headerCheck.data.values[0]) === JSON.stringify(newHeaderRow)) {\n                 sheetNeedsHeader = false;\n            }\n        }\n      } catch (getHeaderError: any) {\n          if (getHeaderError.message && (getHeaderError.message.includes(\"Unable to parse range\") || getHeaderError.message.includes(\"Requested entity was not found\"))) {\n              sheetNeedsHeader = true; // Sheet or range doesn't exist, so header is needed\n          } else if (getHeaderError.response && getHeaderError.response.data && getHeaderError.response.data.error && getHeaderError.response.data.error.code === 404) {\n              sheetNeedsHeader = true; // Also indicates entity not found\n          } else {\n            // For other errors, conservatively assume header might be needed or log warning.\n            console.warn(\"Could not definitively check for header due to an error. Proceeding as if header is needed. Error:\", getHeaderError.message);\n            sheetNeedsHeader = true; \n          }\n      }\n\n      // --- 2. Find and delete existing rows for this documentInstanceId ---\n      if (!sheetNeedsHeader) { \n        console.log(`Checking for existing data with DocumentInstanceID: ${documentInstanceId} in sheet: ${actualSheetNameUsed}`);\n        const dataToSearch = await sheets.spreadsheets.values.get({\n            spreadsheetId,\n            range: `${actualSheetNameUsed}!A:A`, \n        });\n\n        const rowsToDelete: sheets_v4.Schema$Request[] = [];\n        if (dataToSearch.data.values) {\n            for (let i = 0; i < dataToSearch.data.values.length; i++) {\n                if (dataToSearch.data.values[i][documentInstanceIdColumnIndex] === documentInstanceId) {\n                    rowsToDelete.push({\n                        deleteDimension: {\n                            range: {\n                                sheetId: actualSheetIdNumberUsed, \n                                dimension: 'ROWS',\n                                startIndex: i, \n                                endIndex: i + 1,\n                            },\n                        },\n                    });\n                }\n            }\n        }\n\n        if (rowsToDelete.length > 0) {\n            rowsToDelete.sort((a, b) => (b.deleteDimension!.range!.startIndex!) - (a.deleteDimension!.range!.startIndex!));\n            console.log(`Found ${rowsToDelete.length} existing row(s) for DocumentInstanceID ${documentInstanceId}. Deleting them.`);\n            await sheets.spreadsheets.batchUpdate({\n                spreadsheetId,\n                requestBody: {\n                    requests: rowsToDelete,\n                },\n            });\n        } else {\n            console.log(`No existing rows found for DocumentInstanceID ${documentInstanceId}.`);\n        }\n      }\n\n\n      // --- 3. Prepare and append new data ---\n      const dataRowsToAppend: (string | number | boolean | null)[][] = [];\n      const commonData = [\n        data.classe ?? \"\",\n        data.cours ?? \"\",\n        data.date ?? \"\",\n        data.nom_du_professeur ?? \"\",\n        data.nombre_des_présents ?? 0,\n        data.salle_n ?? \"\",\n        data.séance ?? \"\",\n      ];\n\n      if (data.présences && data.présences.length > 0) {\n        for (const student of data.présences) {\n          dataRowsToAppend.push([\n            documentInstanceId, \n            ...commonData,\n            student.n ?? \"\",\n            student.nom_prénom ?? \"\",\n          ]);\n        }\n      } else {\n        dataRowsToAppend.push([\n          documentInstanceId, \n          ...commonData,\n          \"\", \n          \"\", \n        ]);\n      }\n      \n      const finalRowsForSheet = [];\n      if (sheetNeedsHeader) {\n          console.log(\"Sheet requires header. Prepending header row.\");\n          finalRowsForSheet.push(newHeaderRow);\n      }\n      finalRowsForSheet.push(...dataRowsToAppend);\n\n      if (finalRowsForSheet.length === 0 || (finalRowsForSheet.length === 1 && sheetNeedsHeader && dataRowsToAppend.length === 0)) {\n        return {\n            success: true,\n            message: 'No new data rows to append to Google Sheet.',\n            spreadsheetId: spreadsheetId,\n        };\n      }\n\n      const appendResponse = await sheets.spreadsheets.values.append({\n        spreadsheetId,\n        range: `${actualSheetNameUsed}!A1`, \n        valueInputOption: 'USER_ENTERED', \n        insertDataOption: 'INSERT_ROWS', \n        requestBody: {\n          values: finalRowsForSheet,\n        },\n      });\n\n      console.log('Successfully saved/updated data in Google Sheet:', appendResponse.data);\n      return {\n        success: true,\n        message: `Data successfully saved/updated in Google Sheet '${actualSheetNameUsed}'. ${dataRowsToAppend.length} data row(s) processed for DocumentInstanceID ${documentInstanceId}. ${sheetNeedsHeader ? 'Header was also written.' : ''}`,\n        spreadsheetId: appendResponse.data.spreadsheetId,\n        updatedRange: appendResponse.data.updates?.updatedRange,\n      };\n    } catch (error: any) {\n      console.error('Error saving to Google Sheet:', error.message, error.stack, error.response?.data?.error);\n      let errorMessage = `Failed to save to Google Sheet: ${error.message}`;\n      if (error.response?.data?.error?.message) {\n        errorMessage += ` Google API Error: ${error.response.data.error.message}`;\n      }\n      return { success: false, message: errorMessage };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;IAgCsB","debugId":null}},
    {"offset": {"line": 731, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useState, useEffect, type ChangeEvent } from 'react';\nimport Image from 'next/image'; // Import next/image\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport PdfViewer from \"@/components/pdf-viewer\";\nimport DataEditor from \"@/components/data-editor\";\nimport { extractDataFromPdf, type ExtractDataFromPdfOutput, type ExtractDataFromPdfInput } from \"@/ai/flows/extract-data-from-pdf\";\nimport { saveToGoogleSheet, type SaveToGoogleSheetOutput, type SaveToGoogleSheetInput } from \"@/ai/flows/save-to-google-sheet\";\nimport type { ExtractedPdfData } from \"@/ai/schemas/pdf-data-schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Cpu, FileJson, Loader2, AlertTriangle, Database, Sheet as SheetIcon, Settings2, ArrowLeft, ArrowRight } from 'lucide-react';\nimport { v4 as uuidv4 } from 'uuid';\n\ntype ExtractionEngine = ExtractDataFromPdfInput['extractionEngine'];\n\ninterface ProcessedPdfEntry {\n  file: File;\n  pdfData: ExtractedPdfData | null;\n  documentInstanceId: string;\n}\n\nexport default function PdfExtractorPage() {\n  const [processedEntries, setProcessedEntries] = useState<ProcessedPdfEntry[]>([]);\n  const [currentPdfIndex, setCurrentPdfIndex] = useState<number>(0);\n\n  const [pdfObjectUrl, setPdfObjectUrl] = useState<string | null>(null);\n  const [pdfDataUri, setPdfDataUri] = useState<string | null>(null);\n\n  const [currentExtractedData, setCurrentExtractedData] = useState<ExtractedPdfData | null>(null);\n\n  const [extractionEngine, setExtractionEngine] = useState<ExtractionEngine>('genkitDirect');\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isSavingToMongoDb, setIsSavingToMongoDb] = useState<boolean>(false);\n  const [isSavingToSheet, setIsSavingToSheet] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const currentUrl = pdfObjectUrl;\n    return () => {\n      if (currentUrl) {\n        URL.revokeObjectURL(currentUrl);\n      }\n    };\n  }, [pdfObjectUrl]);\n\n  const loadPdfAtIndex = (index: number, entries: ProcessedPdfEntry[] = processedEntries) => {\n    if (pdfObjectUrl) {\n      URL.revokeObjectURL(pdfObjectUrl);\n      setPdfObjectUrl(null);\n    }\n\n    if (entries.length === 0 && index === 0) {\n      setPdfDataUri(null);\n      setCurrentExtractedData(null);\n      setError(null);\n      return;\n    }\n\n    if (index >= 0 && index < entries.length) {\n      const entry = entries[index];\n      const newObjectUrl = URL.createObjectURL(entry.file);\n      setPdfObjectUrl(newObjectUrl);\n\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPdfDataUri(reader.result as string);\n      };\n      reader.onerror = () => {\n        setError(`Error reading file: ${entry.file.name}`);\n        setPdfDataUri(null);\n      }\n      reader.readAsDataURL(entry.file);\n\n      setCurrentExtractedData(entry.pdfData || null);\n      setError(null);\n    } else {\n      setPdfDataUri(null);\n      setCurrentExtractedData(null);\n      setError(null);\n      if (entries.length > 0 && index >= entries.length) {\n        toast({\n          title: \"All PDFs Processed\",\n          description: \"You have reached the end of the PDF queue.\",\n        });\n      }\n    }\n  };\n\n  const advanceToNextPdf = () => {\n    const newIndex = currentPdfIndex + 1;\n    setCurrentPdfIndex(newIndex);\n    if (newIndex < processedEntries.length) {\n      loadPdfAtIndex(newIndex, processedEntries);\n    } else {\n      loadPdfAtIndex(newIndex, processedEntries);\n      toast({\n        title: \"Queue Finished\",\n        description: \"All PDFs in the queue have been processed and saved (or viewed).\",\n      });\n    }\n  };\n\n  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      const newPdfFiles = Array.from(files).filter(file => file.type === \"application/pdf\");\n      if (newPdfFiles.length > 0) {\n        const newEntries: ProcessedPdfEntry[] = newPdfFiles.map(file => ({\n          file,\n          pdfData: null,\n          documentInstanceId: uuidv4(),\n        }));\n        setProcessedEntries(newEntries);\n        setCurrentPdfIndex(0);\n        loadPdfAtIndex(0, newEntries);\n        setError(null);\n      } else {\n        setProcessedEntries([]);\n        setCurrentPdfIndex(0);\n        loadPdfAtIndex(0, []);\n        setError(\"Please select valid PDF files.\");\n        toast({ title: \"Invalid Files\", description: \"No valid PDF files were selected.\", variant: \"destructive\" });\n      }\n    } else {\n      setProcessedEntries([]);\n      setCurrentPdfIndex(0);\n      loadPdfAtIndex(0, []);\n      setError(null);\n    }\n    if (event.target) {\n        event.target.value = '';\n    }\n  };\n\n  const handleProcessPdf = async () => {\n    if (!pdfDataUri || currentPdfIndex >= processedEntries.length) {\n      setError(\"Please select a PDF file from the queue to process.\");\n      toast({\n        title: \"No PDF Ready\",\n        description: \"No PDF is currently loaded for processing or queue is finished.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    // Don't reset currentExtractedData here if we want to keep showing old data until new is loaded\n    // setCurrentExtractedData(null);\n\n    try {\n      const inputArgs: ExtractDataFromPdfInput = { pdfDataUri, extractionEngine };\n      const result: ExtractDataFromPdfOutput = await extractDataFromPdf(inputArgs);\n\n      if (result && result.error) {\n        console.error(\"Error from AI flow:\", result.error, \"Full result object:\", result);\n        const displayError = `AI Flow Error: ${result.error}`;\n        setError(displayError);\n        // Keep showing potentially existing data for this PDF\n        setCurrentExtractedData(processedEntries[currentPdfIndex]?.pdfData || null);\n        toast({\n          title: \"Extraction Failed\",\n          description: displayError,\n          variant: \"destructive\",\n        });\n        setIsLoading(false);\n        return;\n      }\n\n      if (result && result.jsonOutput && result.jsonOutput.trim() !== '' && result.jsonOutput.trim() !== '{}') {\n        try {\n          const parsedData: ExtractedPdfData = JSON.parse(result.jsonOutput);\n          setCurrentExtractedData(parsedData);\n          setProcessedEntries(prevEntries => {\n            const newEntries = [...prevEntries];\n            if (newEntries[currentPdfIndex]) {\n                 newEntries[currentPdfIndex] = { ...newEntries[currentPdfIndex], pdfData: parsedData };\n            } else {\n                // This case should ideally not happen if currentPdfIndex is always valid\n                console.warn(\"currentPdfIndex might be out of bounds when setting processed data\");\n            }\n            return newEntries;\n          });\n          toast({\n            title: \"Data Extracted\",\n            description: `Data extracted for ${processedEntries[currentPdfIndex]?.file.name || 'current PDF'}.`,\n          });\n        } catch (parseError: any) {\n          console.error(\"Error parsing AI output as JSON:\", parseError, \"Raw output:\", result.jsonOutput);\n          const displayError = \"Failed to parse AI output. The AI returned an unexpected format.\";\n          setError(displayError);\n          setCurrentExtractedData(processedEntries[currentPdfIndex]?.pdfData || null);\n          toast({\n            title: \"Parsing Failed\",\n            description: displayError,\n            variant: \"destructive\",\n          });\n        }\n      } else {\n        let errorMessage = \"AI did not return expected data format or returned empty/default data.\";\n        if (!result) {\n            errorMessage = \"No response from AI service.\";\n        } else if (!result.jsonOutput) {\n            errorMessage = \"AI response missing 'jsonOutput' field.\";\n        } else if (result.jsonOutput.trim() === '' || result.jsonOutput.trim() === '{}') {\n            errorMessage = \"AI returned empty/default data. Review PDF content or prompt if fields are unexpectedly empty.\";\n        }\n        console.warn(\"Problematic AI Result:\", errorMessage, \"Full result object:\", result);\n        setError(errorMessage);\n        try {\n          // Attempt to parse even if it's default data, to store the defaults\n          const parsedData: ExtractedPdfData | null = result && result.jsonOutput ? JSON.parse(result.jsonOutput) : null;\n          setCurrentExtractedData(parsedData);\n          setProcessedEntries(prevEntries => {\n            const newEntries = [...prevEntries];\n             if (newEntries[currentPdfIndex]) {\n                newEntries[currentPdfIndex] = { ...newEntries[currentPdfIndex], pdfData: parsedData };\n            }\n            return newEntries;\n          });\n           if (parsedData) { // If we successfully parsed (even default data)\n            toast({\n              title: \"Extraction Note\",\n              description: \"AI processed the PDF but returned default/empty values for some or all fields. Data is shown for review.\",\n              variant: \"default\"\n            });\n          }\n        } catch (e) {\n          console.error(\"Error parsing even default AI output:\", e, \"Raw output:\", result?.jsonOutput);\n          // Fallback to any previously existing data for this PDF\n          setCurrentExtractedData(processedEntries[currentPdfIndex]?.pdfData || null);\n        }\n      }\n    } catch (err: any) {\n      console.error(\"Error processing PDF in client:\", err);\n      const errorMessage = err.message || \"An unknown error occurred during PDF processing.\";\n      setError(errorMessage);\n      setCurrentExtractedData(processedEntries[currentPdfIndex]?.pdfData || null);\n      toast({\n        title: \"Processing Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDataChange = (updatedData: ExtractedPdfData) => {\n    setCurrentExtractedData(updatedData);\n    setProcessedEntries(prevEntries => {\n      const newEntries = [...prevEntries];\n      if (newEntries[currentPdfIndex]) {\n        newEntries[currentPdfIndex] = { ...newEntries[currentPdfIndex], pdfData: updatedData };\n      }\n      return newEntries;\n    });\n  };\n\n  const handleDownloadJson = () => {\n    const dataToDownload = processedEntries[currentPdfIndex]?.pdfData;\n    if (!dataToDownload) {\n      toast({\n        title: \"No Data\",\n        description: \"There is no data for the current PDF to download.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const jsonString = JSON.stringify(dataToDownload, null, 2);\n      const blob = new Blob([jsonString], { type: \"application/json\" });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      const currentFile = processedEntries[currentPdfIndex]?.file;\n      a.download = `${currentFile?.name.replace(/\\.pdf$/i, '') || 'extracted_data'}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      toast({\n        title: \"Download Started\",\n        description: \"Your JSON file is downloading.\",\n      });\n    } catch (e: any) {\n        console.error(\"Error preparing JSON for download:\", e);\n        toast({\n            title: \"Download Error\",\n            description: \"Could not prepare data for download. Ensure data is valid JSON.\",\n            variant: \"destructive\",\n        });\n    }\n  };\n\n  const handleSaveToMongoDb = async () => {\n    const currentEntry = processedEntries[currentPdfIndex];\n    const dataToSave = currentEntry?.pdfData;\n\n    if (!dataToSave) {\n      toast({\n        title: \"No Data\",\n        description: \"There is no extracted data for the current PDF to save.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSavingToMongoDb(true);\n    try {\n      const response = await fetch('/api/save-to-mongodb', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(dataToSave),\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        toast({\n          title: \"Saved to MongoDB\",\n          description: `${result.message} (ID: ${result.recordId || 'N/A'}) for ${currentEntry?.file.name || 'current PDF'}.`,\n        });\n        advanceToNextPdf();\n      } else {\n        toast({\n          title: \"MongoDB Save Failed\",\n          description: result.message || \"An unknown error occurred while saving via API.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (err: any) {\n      console.error(\"Error saving to MongoDB via API:\", err);\n      toast({\n        title: \"MongoDB Save Error\",\n        description: err.message || \"An unknown network or client-side error occurred.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSavingToMongoDb(false);\n    }\n  };\n\n  const handleSaveToSheet = async () => {\n    const currentEntry = processedEntries[currentPdfIndex];\n    const dataToSave = currentEntry?.pdfData;\n    const docInstanceId = currentEntry?.documentInstanceId;\n\n    if (!dataToSave || !docInstanceId) {\n      toast({\n        title: \"No Data\",\n        description: \"There is no extracted data or document ID for the current PDF to save to Google Sheet.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSavingToSheet(true);\n    try {\n      const input: SaveToGoogleSheetInput = { extractedData: dataToSave, documentInstanceId: docInstanceId };\n      const result: SaveToGoogleSheetOutput = await saveToGoogleSheet(input);\n\n      if (result.success) {\n        toast({\n          title: \"Saved to Google Sheet\",\n          description: `${result.message} for ${currentEntry?.file.name || 'current PDF'}.`,\n        });\n        advanceToNextPdf();\n      } else {\n        toast({\n          title: \"Google Sheet Save Failed\",\n          description: result.message,\n          variant: \"destructive\",\n        });\n      }\n    } catch (err: any) {\n      console.error(\"Error saving to Google Sheet via Genkit flow:\", err);\n      toast({\n        title: \"Google Sheet Save Error\",\n        description: err.message || \"An unknown error occurred during the Genkit flow.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSavingToSheet(false);\n    }\n  };\n\n  const handlePreviousPdf = () => {\n    if (currentPdfIndex > 0) {\n      const newIndex = currentPdfIndex - 1;\n      setCurrentPdfIndex(newIndex);\n      loadPdfAtIndex(newIndex, processedEntries);\n    }\n  };\n\n  const handleNextPdf = () => {\n    if (currentPdfIndex < processedEntries.length - 1) {\n      const newIndex = currentPdfIndex + 1;\n      setCurrentPdfIndex(newIndex);\n      loadPdfAtIndex(newIndex, processedEntries);\n    } else if (currentPdfIndex === processedEntries.length - 1 && processedEntries.length > 0) {\n      // If on the last PDF, \"Next\" can mean going to the \"end of queue\" state\n      setCurrentPdfIndex(processedEntries.length);\n      loadPdfAtIndex(processedEntries.length, processedEntries); // This will trigger the \"All PDFs Processed\" message\n    }\n  };\n\n  const canProcess = processedEntries.length > 0 && currentPdfIndex < processedEntries.length;\n  const isAnySavingInProgress = isSavingToMongoDb || isSavingToSheet;\n  const isAnyOperationInProgress = isLoading || isAnySavingInProgress;\n\n  const processPdfDisabled = isAnyOperationInProgress || !canProcess;\n  const actionButtonsDisabled = !currentExtractedData || isAnyOperationInProgress;\n  const prevButtonDisabled = currentPdfIndex === 0 || isAnyOperationInProgress || processedEntries.length === 0;\n  const nextButtonDisabled = currentPdfIndex >= processedEntries.length -1 || isAnyOperationInProgress || processedEntries.length === 0;\n\n\n  const currentFile = processedEntries[currentPdfIndex]?.file;\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background p-4 md:p-8 selection:bg-primary/20\">\n      <header className=\"mb-8 flex flex-col items-center\">\n        <div className=\"flex items-center gap-4 mb-2\">\n          <Image\n            src=\"https://placehold.co/64x64.png\"\n            alt=\"Polygon University Logo\"\n            width={64}\n            height={64}\n            data-ai-hint=\"polygon university gold logo\"\n            className=\"rounded-sm\"\n          />\n          <h1 className=\"text-4xl font-bold text-primary tracking-tight\">\n            PDF Data Extractor\n          </h1>\n        </div>\n        <p className=\"text-center text-muted-foreground text-lg\">\n          Upload PDF(s), extract data using AI, edit, and save.\n        </p>\n      </header>\n\n      <div className=\"mb-8 p-6 bg-card rounded-xl shadow-xl border border-border\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 items-start\">\n          <div>\n            <Label htmlFor=\"pdf-upload\" className=\"text-lg font-medium mb-2 block text-foreground\">\n              Upload PDF Document(s)\n            </Label>\n            <div className=\"flex items-center space-x-3\">\n              <Input\n                id=\"pdf-upload\"\n                type=\"file\"\n                accept=\".pdf\"\n                multiple\n                onChange={handleFileChange}\n                className=\"flex-grow file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20 cursor-pointer\"\n                aria-label=\"Upload PDF Documents\"\n              />\n            </div>\n            {processedEntries.length > 0 && (\n              <div className=\"mt-3 flex items-center gap-2\">\n                 <Button\n                    onClick={handlePreviousPdf}\n                    disabled={prevButtonDisabled}\n                    variant=\"outline\"\n                    size=\"icon\"\n                    aria-label=\"Previous PDF\"\n                  >\n                    <ArrowLeft className=\"h-5 w-5\" />\n                  </Button>\n                <p className=\"text-sm text-muted-foreground truncate max-w-xs\" title={currentFile?.name}>\n                  {currentPdfIndex < processedEntries.length ? (\n                    <>Current: <span className=\"font-medium text-foreground\">{currentFile?.name}</span> ({currentPdfIndex + 1} of {processedEntries.length})</>\n                  ) : (\n                     processedEntries.length > 0 ? <span className=\"text-green-600 font-medium\">All {processedEntries.length} PDFs viewed. Queue finished.</span> : \"No PDFs in queue.\"\n                  )}\n                </p>\n                 <Button\n                    onClick={handleNextPdf}\n                    disabled={nextButtonDisabled}\n                    variant=\"outline\"\n                    size=\"icon\"\n                    aria-label=\"Next PDF\"\n                  >\n                    <ArrowRight className=\"h-5 w-5\" />\n                  </Button>\n              </div>\n            )}\n            {processedEntries.length === 0 && (\n              <p className=\"mt-3 text-sm text-muted-foreground\">\n                No PDF files selected.\n              </p>\n            )}\n          </div>\n          <div className=\"space-y-3\">\n            <Label className=\"text-lg font-medium mb-2 block text-foreground\">\n              <Settings2 className=\"inline-block mr-2 h-5 w-5 text-primary\" />\n              Extraction Engine\n            </Label>\n            <RadioGroup\n              value={extractionEngine}\n              onValueChange={(value: string) => setExtractionEngine(value as ExtractionEngine)}\n              className=\"flex flex-col sm:flex-row gap-2 sm:gap-4\"\n            >\n              <div className=\"flex items-center space-x-2 p-3 border rounded-md hover:bg-accent/10 transition-colors cursor-pointer has-[[data-state=checked]]:bg-primary/10 has-[[data-state=checked]]:border-primary\">\n                <RadioGroupItem value=\"genkitDirect\" id=\"genkitDirect\" />\n                <Label htmlFor=\"genkitDirect\" className=\"font-normal text-sm cursor-pointer\">Genkit Direct AI</Label>\n              </div>\n              <div className=\"flex items-center space-x-2 p-3 border rounded-md hover:bg-accent/10 transition-colors cursor-pointer has-[[data-state=checked]]:bg-primary/10 has-[[data-state=checked]]:border-primary\">\n                <RadioGroupItem value=\"googleCloudVision\" id=\"googleCloudVision\" />\n                <Label htmlFor=\"googleCloudVision\" className=\"font-normal text-sm cursor-pointer\">Google Cloud Vision OCR + AI</Label>\n              </div>\n            </RadioGroup>\n          </div>\n        </div>\n         <div className=\"mt-6 flex flex-col md:flex-row gap-3 items-center flex-wrap\">\n            <Button\n                onClick={handleProcessPdf}\n                disabled={processPdfDisabled}\n                className=\"bg-accent hover:bg-accent/90 text-accent-foreground min-w-[150px] w-full md:w-auto transition-all duration-150 ease-in-out transform active:scale-95\"\n                aria-label=\"Process PDF for data extraction\"\n              >\n                {isLoading ? (\n                  <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                ) : (\n                  <Cpu className=\"mr-2 h-5 w-5\" />\n                )}\n                {isLoading ? \"Processing...\" : (canProcess ? `Process PDF ${currentPdfIndex + 1}` : \"Process PDF\")}\n              </Button>\n            {currentExtractedData && (\n             <>\n                <Button\n                    onClick={handleDownloadJson}\n                    disabled={actionButtonsDisabled}\n                    variant=\"outline\"\n                    className=\"border-primary text-primary hover:bg-primary/5 hover:text-primary min-w-[150px] w-full md:w-auto transition-all duration-150 ease-in-out\"\n                    aria-label=\"Download extracted data as JSON\"\n                >\n                    <FileJson className=\"mr-2 h-5 w-5\" />\n                    Download JSON\n                </Button>\n                <Button\n                    onClick={handleSaveToMongoDb}\n                    disabled={actionButtonsDisabled}\n                    variant=\"outline\"\n                    className=\"border-green-600 text-green-600 hover:bg-green-500/10 hover:text-green-700 min-w-[150px] w-full md:w-auto transition-all duration-150 ease-in-out\"\n                    aria-label=\"Save extracted data to MongoDB\"\n                >\n                    {isSavingToMongoDb ? (\n                        <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                    ) : (\n                        <Database className=\"mr-2 h-5 w-5\" />\n                    )}\n                    {isSavingToMongoDb ? \"Saving...\" : \"Save to DB\"}\n                </Button>\n                <Button\n                    onClick={handleSaveToSheet}\n                    disabled={actionButtonsDisabled}\n                    variant=\"outline\"\n                    className=\"border-blue-500 text-blue-500 hover:bg-blue-500/10 hover:text-blue-600 min-w-[150px] w-full md:w-auto transition-all duration-150 ease-in-out\"\n                    aria-label=\"Save extracted data to Google Sheet\"\n                >\n                    {isSavingToSheet ? (\n                        <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                    ) : (\n                        <SheetIcon className=\"mr-2 h-5 w-5\" />\n                    )}\n                    {isSavingToSheet ? \"Saving...\" : \"Save to Sheet\"}\n                </Button>\n            </>\n          )}\n        </div>\n        {error && (\n          <Alert variant=\"destructive\" className=\"mt-6 shadow-md\">\n            <AlertTriangle className=\"h-5 w-5\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n      </div>\n\n      <main className=\"flex-grow grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8\">\n        <section className=\"h-[calc(100vh-350px)] min-h-[450px] rounded-xl overflow-hidden border border-border bg-card\">\n          <PdfViewer pdfUrl={pdfObjectUrl} />\n        </section>\n        <section className=\"h-[calc(100vh-350px)] min-h-[450px] rounded-xl overflow-hidden border border-border bg-card\">\n          <DataEditor data={currentExtractedData} onDataChange={handleDataChange} />\n        </section>\n      </main>\n      <footer className=\"mt-12 py-6 text-center text-muted-foreground text-sm\">\n        <p>© Copyright reserved to Polygon University</p>\n      </footer>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}